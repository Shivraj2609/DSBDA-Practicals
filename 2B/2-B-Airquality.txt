import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import warnings 
warnings.filterwarnings('ignore')
import seaborn as sns

data = pd.read_csv('airquality.csv',sep=',')

data.head()

data.drop(data.iloc[:,[0]], axis=1, inplace=True)

data 


data.isnull().sum()


data["Ozone"].fillna(data["Ozone"].mean(),inplace=True)
data["Solar.R"].fillna(data["Solar.R"].mean(),inplace=True)


data.head()

data["humidity"].fillna("Medium",inplace=True)

data.head()

data.isnull().sum()

## Label Encoding 

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()

data["humidity"] = le.fit_transform(data["humidity"])
data.head()

## Dependent and Independent Variables

#x = data.iloc[:, [0,1,2,3]]
#y = data["humidity"]

x = data[["Ozone"]]
y = data[["Temp"]]


## Import Function and Split Data into Training and Testing Data

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

## Print the Size of Training snd Testing Data

print(len(x_train))
print(len(x_test))
print(len(y_train))
print(len(y_test))

## Creating a Linear Regression Model 

from sklearn import linear_model

regr = linear_model.LinearRegression()

## Fit the Model and Display Regression Coefficients

model = reg.fit(x_train,y_train)
print(model.intercept_)
print(model.coef_)


## Predict the Values 
y_predict = model.predict(x_test)

y_predict

## Import and Calculate the Performance Metrics

from sklearn.metrics import mean_squared_error

#Mean Squared Error
mse = mean_squared_error(y_test,y_predict)
mse

#Root Mean Squared Error
rsme = np.sqrt(mse)

rsme


## Plotting the Data

plt.scatter(y_test,y_predict);
plt.xlabel('Actual');
plt.ylabel('Predicted');

sns.regplot(x=x_train,y=y_train,ci=None,color ='black');

plt.scatter(x_train, y_train, color = "red")
plt.plot(x_train,model.predict(x_train), color = "green")
plt.title("Temperature Prediction")
plt.xlabel("Ozone")
plt.ylabel("Temp")